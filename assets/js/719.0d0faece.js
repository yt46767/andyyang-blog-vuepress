(window.webpackJsonp=window.webpackJsonp||[]).push([[719],{810:function(t,e,a){"use strict";a.r(e);var n=a(7),s=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"动态-import"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#动态-import"}},[t._v("#")]),t._v(" 动态 import()")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('import("./math").then(math => {\n  console.log(math.add(16, 26));\n});\n')])])]),e("h2",{attrs:{id:"react-lazy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-lazy"}},[t._v("#")]),t._v(" React.lazy")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import React, { lazy } from 'react';\n//使用之前\nimport OtherComponent from './OtherComponent';\n//使用之后\nconst OtherComponent = React.lazy(() => import('./OtherComponent'));\n")])])]),e("p",[t._v("React.lazy 接受一个函数，这个函数需要动态调用 import()。"),e("br"),t._v("\n它必须返回一个 Promise，该 Promise 需要 resolve 一个 =="),e("strong",[t._v("defalut export")]),t._v("== 的 React 组件。")]),t._v(" "),e("h5",{attrs:{id:"例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#例"}},[t._v("#")]),t._v(" 例")]),t._v(" "),e("p",[t._v("fallback 属性接受任何在组件加载过程中你想展示的 React 元素。"),e("br"),t._v("\n你可以将 Suspense 组件置于懒加载组件之上的任何位置。你甚至可以用一个 Suspense 组件包裹多个懒加载组件。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import React, { Suspense, lazy } from 'react';\nconst OtherComponent = React.lazy(() => import('./OtherComponent'));\nconst AnotherComponent = React.lazy(() => import('./AnotherComponent'));\n\nfunction MyComponent() {\n  return (\n    <div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <section>\n          <OtherComponent />\n          <AnotherComponent />\n        </section>\n      </Suspense>\n    </div>\n  );\n}\n")])])]),e("h2",{attrs:{id:"基于路由的代码分割"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基于路由的代码分割"}},[t._v("#")]),t._v(" 基于路由的代码分割")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport React, { Suspense, lazy } from 'react';\n\nconst Home = lazy(() => import('./routes/Home'));\nconst About = lazy(() => import('./routes/About'));\n\nconst App = () => (\n  Router\n    <Suspense fallback={<div>Loading...</div>}>\n      Switch\n        <Route exact path=\"/\" component={Home}/>\n        <Route path=\"/about\" component={About}/>\n      </Switch>\n    </Suspense>\n  </Router>\n);\n")])])]),e("h2",{attrs:{id:"命名导出-named-exports"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命名导出-named-exports"}},[t._v("#")]),t._v(" 命名导出（Named Exports）")]),t._v(" "),e("p",[t._v("React.lazy 目前 =="),e("strong",[t._v("只支持默认导出（default exports）")]),t._v("== 。"),e("br"),t._v("\n如果你想被引入的模块使用命名导出（named exports），你可以创建一个中间模块，来重新导出为默认模块。这能保证 tree shaking 不会出错，并且不必引入不需要的组件。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// ManyComponents.js\nexport const MyComponent = /* ... */;\nexport const MyUnusedComponent = /* ... */;\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// MyComponent.js\nexport { MyComponent as default } from "./ManyComponents.js";\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// MyApp.js\nimport React, { lazy } from 'react';\nconst MyComponent = lazy(() => import(\"./MyComponent.js\"));\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);